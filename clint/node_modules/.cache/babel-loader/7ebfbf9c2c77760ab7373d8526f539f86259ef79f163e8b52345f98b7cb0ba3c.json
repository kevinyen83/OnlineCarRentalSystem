{"ast":null,"code":"'use strict';\n\nvar utils = require('./utils');\nvar PROTECTION_PREFIX = /^\\)\\]\\}',?\\n/;\nvar DEFAULT_CONTENT_TYPE = {\n  'Content-Type': 'application/x-www-form-urlencoded'\n};\nmodule.exports = {\n  transformRequest: [function transformResponseJSON(data, headers) {\n    if (utils.isFormData(data)) {\n      return data;\n    }\n    if (utils.isArrayBuffer(data)) {\n      return data;\n    }\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils.isObject(data) && !utils.isFile(data) && !utils.isBlob(data)) {\n      // Set application/json if no Content-Type has been specified\n      if (!utils.isUndefined(headers)) {\n        utils.forEach(headers, function processContentTypeHeader(val, key) {\n          if (key.toLowerCase() === 'content-type') {\n            headers['Content-Type'] = val;\n          }\n        });\n        if (utils.isUndefined(headers['Content-Type'])) {\n          headers['Content-Type'] = 'application/json;charset=utf-8';\n        }\n      }\n      return JSON.stringify(data);\n    }\n    return data;\n  }],\n  transformResponse: [function transformResponseJSON(data) {\n    /*eslint no-param-reassign:0*/\n    if (typeof data === 'string') {\n      data = data.replace(PROTECTION_PREFIX, '');\n      try {\n        data = JSON.parse(data);\n      } catch (e) {/* Ignore */}\n    }\n    return data;\n  }],\n  headers: {\n    common: {\n      'Accept': 'application/json, text/plain, */*'\n    },\n    patch: utils.merge(DEFAULT_CONTENT_TYPE),\n    post: utils.merge(DEFAULT_CONTENT_TYPE),\n    put: utils.merge(DEFAULT_CONTENT_TYPE)\n  },\n  timeout: 0,\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN'\n};","map":{"version":3,"names":["utils","require","PROTECTION_PREFIX","DEFAULT_CONTENT_TYPE","module","exports","transformRequest","transformResponseJSON","data","headers","isFormData","isArrayBuffer","isArrayBufferView","buffer","isObject","isFile","isBlob","isUndefined","forEach","processContentTypeHeader","val","key","toLowerCase","JSON","stringify","transformResponse","replace","parse","e","common","patch","merge","post","put","timeout","xsrfCookieName","xsrfHeaderName"],"sources":["/Users/net/node_modules/axios/lib/defaults.js"],"sourcesContent":["'use strict';\n\nvar utils = require('./utils');\n\nvar PROTECTION_PREFIX = /^\\)\\]\\}',?\\n/;\nvar DEFAULT_CONTENT_TYPE = {\n  'Content-Type': 'application/x-www-form-urlencoded'\n};\n\nmodule.exports = {\n  transformRequest: [function transformResponseJSON(data, headers) {\n    if (utils.isFormData(data)) {\n      return data;\n    }\n    if (utils.isArrayBuffer(data)) {\n      return data;\n    }\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils.isObject(data) && !utils.isFile(data) && !utils.isBlob(data)) {\n      // Set application/json if no Content-Type has been specified\n      if (!utils.isUndefined(headers)) {\n        utils.forEach(headers, function processContentTypeHeader(val, key) {\n          if (key.toLowerCase() === 'content-type') {\n            headers['Content-Type'] = val;\n          }\n        });\n\n        if (utils.isUndefined(headers['Content-Type'])) {\n          headers['Content-Type'] = 'application/json;charset=utf-8';\n        }\n      }\n      return JSON.stringify(data);\n    }\n    return data;\n  }],\n\n  transformResponse: [function transformResponseJSON(data) {\n    /*eslint no-param-reassign:0*/\n    if (typeof data === 'string') {\n      data = data.replace(PROTECTION_PREFIX, '');\n      try {\n        data = JSON.parse(data);\n      } catch (e) { /* Ignore */ }\n    }\n    return data;\n  }],\n\n  headers: {\n    common: {\n      'Accept': 'application/json, text/plain, */*'\n    },\n    patch: utils.merge(DEFAULT_CONTENT_TYPE),\n    post: utils.merge(DEFAULT_CONTENT_TYPE),\n    put: utils.merge(DEFAULT_CONTENT_TYPE)\n  },\n\n  timeout: 0,\n\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN'\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,KAAK,GAAGC,OAAO,CAAC,SAAS,CAAC;AAE9B,IAAIC,iBAAiB,GAAG,cAAc;AACtC,IAAIC,oBAAoB,GAAG;EACzB,cAAc,EAAE;AAClB,CAAC;AAEDC,MAAM,CAACC,OAAO,GAAG;EACfC,gBAAgB,EAAE,CAAC,SAASC,qBAAqBA,CAACC,IAAI,EAAEC,OAAO,EAAE;IAC/D,IAAIT,KAAK,CAACU,UAAU,CAACF,IAAI,CAAC,EAAE;MAC1B,OAAOA,IAAI;IACb;IACA,IAAIR,KAAK,CAACW,aAAa,CAACH,IAAI,CAAC,EAAE;MAC7B,OAAOA,IAAI;IACb;IACA,IAAIR,KAAK,CAACY,iBAAiB,CAACJ,IAAI,CAAC,EAAE;MACjC,OAAOA,IAAI,CAACK,MAAM;IACpB;IACA,IAAIb,KAAK,CAACc,QAAQ,CAACN,IAAI,CAAC,IAAI,CAACR,KAAK,CAACe,MAAM,CAACP,IAAI,CAAC,IAAI,CAACR,KAAK,CAACgB,MAAM,CAACR,IAAI,CAAC,EAAE;MACtE;MACA,IAAI,CAACR,KAAK,CAACiB,WAAW,CAACR,OAAO,CAAC,EAAE;QAC/BT,KAAK,CAACkB,OAAO,CAACT,OAAO,EAAE,SAASU,wBAAwBA,CAACC,GAAG,EAAEC,GAAG,EAAE;UACjE,IAAIA,GAAG,CAACC,WAAW,CAAC,CAAC,KAAK,cAAc,EAAE;YACxCb,OAAO,CAAC,cAAc,CAAC,GAAGW,GAAG;UAC/B;QACF,CAAC,CAAC;QAEF,IAAIpB,KAAK,CAACiB,WAAW,CAACR,OAAO,CAAC,cAAc,CAAC,CAAC,EAAE;UAC9CA,OAAO,CAAC,cAAc,CAAC,GAAG,gCAAgC;QAC5D;MACF;MACA,OAAOc,IAAI,CAACC,SAAS,CAAChB,IAAI,CAAC;IAC7B;IACA,OAAOA,IAAI;EACb,CAAC,CAAC;EAEFiB,iBAAiB,EAAE,CAAC,SAASlB,qBAAqBA,CAACC,IAAI,EAAE;IACvD;IACA,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;MAC5BA,IAAI,GAAGA,IAAI,CAACkB,OAAO,CAACxB,iBAAiB,EAAE,EAAE,CAAC;MAC1C,IAAI;QACFM,IAAI,GAAGe,IAAI,CAACI,KAAK,CAACnB,IAAI,CAAC;MACzB,CAAC,CAAC,OAAOoB,CAAC,EAAE,CAAE;IAChB;IACA,OAAOpB,IAAI;EACb,CAAC,CAAC;EAEFC,OAAO,EAAE;IACPoB,MAAM,EAAE;MACN,QAAQ,EAAE;IACZ,CAAC;IACDC,KAAK,EAAE9B,KAAK,CAAC+B,KAAK,CAAC5B,oBAAoB,CAAC;IACxC6B,IAAI,EAAEhC,KAAK,CAAC+B,KAAK,CAAC5B,oBAAoB,CAAC;IACvC8B,GAAG,EAAEjC,KAAK,CAAC+B,KAAK,CAAC5B,oBAAoB;EACvC,CAAC;EAED+B,OAAO,EAAE,CAAC;EAEVC,cAAc,EAAE,YAAY;EAC5BC,cAAc,EAAE;AAClB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}